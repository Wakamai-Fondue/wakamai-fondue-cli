const path = require("path");
const exec = require("child_process").exec;

() => {
	/**
	 * Allow tests to be reran when index.js changes, without actually requiring it.
	 * See https://github.com/facebook/jest/issues/5908
	 */
	require("../cli");
};

describe("help", () => {
	test("renders help on -h", async () => {
		const { exitCode, stdout } = await cli(["-h"]);

		expect(exitCode).toBe(0);
		expect(stdout).toContain("Usage: wakamai-fondue [options]");
	});

	test("renders help on --help", async () => {
		const { exitCode, stdout } = await cli(["-h"]);

		expect(exitCode).toBe(0);
		expect(stdout).toContain("Usage: wakamai-fondue [options]");
	});

	test("renders help if no arguments are given", async () => {
		const { exitCode, stdout } = await cli([""]);

		expect(exitCode).toBe(1);
		expect(stdout).toContain("Usage: wakamai-fondue [options]");
	});
});

describe("font file path", () => {
	test("error when path does not exist", async () => {
		const { exitCode, stdout, stderr } = await cli([
			"./test/fixtures/bogus/nothing.ttf",
			"--json",
		]);

		expect(exitCode).toBe(1);
		expect(stdout).toBe("");
		expect(stderr).toBe(
			"ENOENT: no such file or directory, open './test/fixtures/bogus/nothing.ttf'\n"
		);
	});

	test("error when path is not a font", async () => {
		const { exitCode, stdout, stderr } = await cli([
			"./test/fixtures/roboto/LICENSE",
			"--json",
		]);

		expect(exitCode).toBe(1);
		expect(stdout).toBe("");
		expect(stderr).toBe(
			"./test/fixtures/roboto/LICENSE is either an unsupported font format, or not a font at all.\n"
		);
	});
});

describe("--css", () => {
	test("renders font CSS for all features", async () => {
		jest.setTimeout(10000); // generating css is quite slow at the moment :(

		const { exitCode, stdout } = await cli([
			"./test/fixtures/roboto/Roboto-Regular.ttf",
			"--css",
		]);

		expect(exitCode).toBe(0);
		expect(stdout).toMatch(/CSS for Roboto/);
		expect(stdout).toMatch(/Generated by Wakamai Fondue/);
	});
});

describe("--json", () => {
	test("dumps all font info", async () => {
		const { exitCode, stdout } = await cli([
			"./test/fixtures/roboto/Roboto-Regular.ttf",
			"--json",
		]);

		expect(exitCode).toBe(0);

		const parsedInfo = JSON.parse(stdout);
		expect(parsedInfo["Filename"]).toBe("Roboto-Regular.ttf");
	});
});

function cli(args, cwd = ".") {
	return new Promise((resolve) => {
		exec(
			`node ${path.resolve("./cli")} ${args.join(" ")}`,
			{ cwd },
			(error, stdout, stderr) => {
				resolve({
					exitCode: error && error.code ? error.code : 0,
					error,
					stdout,
					stderr,
				});
			}
		);
	});
}
